;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of adnom-poss-mod-head-aff-hf-constraint
;;; created at:
;;;     Tue Apr 03 21:49:18 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; This is a sample choices file which exercises only a small range of
;;; the information provided by the customization system, in order to
;;; create a grammar for a very small fragment of English. It describes
;;; and SVO language with a small vocabulary drawn from English and
;;; subset of the (already simple) English verbal agreement paradigm. 
;;; Where it was not possible to leave a section blank, we have said
;;; the language does not manifest the phenomenon, even when this is
;;; not actually correct for English.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    POSSESSOR poss,
    INIT bool ].

noun :+ [ CASE case ].

inflected :+ [ CASE-FLAG luk,
    NUM-FLAG luk,
    POSSESSIVE-FLAG luk,
    PERNUM-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+,
    NUM-FLAG na-or-+,
    POSSESSIVE-FLAG na-or-+,
    PERNUM-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
nom := real-case.  ; nom
acc := real-case.  ; acc
dat := real-case.  ; dat

;;; Person

person := *top*.
3rd := person.
non-3rd := person.
2nd := non-3rd.
1st := non-3rd.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item & case-rule-dtr & possessive-rule-dtr &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT - ] > ] ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ POSSESSIVE-FLAG -,
                NUM-FLAG -,
                CASE-FLAG - ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.PERNUM-FLAG - ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comps >,
                       HEAD.INIT + ] ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

itr-verb-lex := intransitive-verb-lex.

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       HEAD.INIT + ] ].

det1-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

possessive-rule-dtr := word-or-lexrule.
case-rule-dtr := word-or-lexrule.

;;; Lexical rule types

num-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & possessive-rule-dtr &
  [ INFLECTED [ NUM-FLAG +,
                CASE-FLAG #case,
                POSSESSIVE-FLAG #possessive,
                PERNUM-FLAG #pernum ],
    DTR common-noun-lex &
        [ INFLECTED [ CASE-FLAG #case,
                      POSSESSIVE-FLAG #possessive,
                      PERNUM-FLAG #pernum ] ] ].

singular-lex-rule := const-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

plural-lex-rule := infl-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

case-lex-rule-super := add-only-no-ccont-rule & possessive-rule-dtr &
  [ INFLECTED [ CASE-FLAG +,
                NUM-FLAG #num,
                POSSESSIVE-FLAG #possessive,
                PERNUM-FLAG #pernum ],
    DTR case-rule-dtr &
        [ INFLECTED [ NUM-FLAG #num,
                      POSSESSIVE-FLAG #possessive,
                      PERNUM-FLAG #pernum ] ] ].

nom-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

possessive-lex-rule-super := lex-rule &
  [ INFLECTED [ POSSESSIVE-FLAG +,
                CASE-FLAG #case,
                NUM-FLAG #num,
                PERNUM-FLAG #pernum ],
    DTR possessive-rule-dtr &
        [ INFLECTED [ CASE-FLAG #case,
                      NUM-FLAG #num,
                      PERNUM-FLAG #pernum ] ] ].

possessum-lex-rule-1 := val-change-with-ccont-lex-rule &
  [ C-CONT [ HOOK #hook,
             RELS <! arg12-ev-relation &
                     [ PRED "poss_rel",
                       LBL #lbl,
                       ARG1 #possessum,
                       ARG2 #possessor ] !>,
             HCONS <!  !>,
             ICONS <!  !> ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.PRON -,
                             VAL.SPR #spr ],
                       CONT.HOOK #hook &
                                 [ INDEX #possessum,
                                   LTOP #lbl ] ],
    SYNSEM.LOCAL.CAT [ POSSESSUM possessum-1,
                       HEAD noun &
                            [ POSSESSOR nonpossessive,
                              INIT - ],
                       VAL [ SPR #spr,
                             COMPS.FIRST [ OPT -,
                                           LOCAL [ CONT.HOOK.INDEX #possessor,
                                                   CAT cat-sat &
                                                       [ VAL.SPR < >,
                                                         HEAD +np &
                                                              [ CASE nom ] ] ] ] ] ] ].

possessum-lex-rule := infl-lex-rule & possessive-lex-rule-super & possessum-lex-rule-1.

nonpossessive-lex-rule-1 := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ POSSESSOR nonpossessive ],
                       POSSESSUM nonpossessive ] ].

nonpossessive-lex-rule := const-lex-rule & nonpossessive-lex-rule-1 & possessive-lex-rule-super.

pernum-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ PERNUM-FLAG +,
                POSSESSIVE-FLAG #possessive,
                CASE-FLAG #case,
                NUM-FLAG #num ],
    DTR verb-lex &
        [ INFLECTED [ POSSESSIVE-FLAG #possessive,
                      CASE-FLAG #case,
                      NUM-FLAG #num ] ] ].

3sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

pl-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

non-3rd-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
