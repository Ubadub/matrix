;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of adnom-poss-spec-pron-head-aff
;;; created at:
;;;     Mon Mar 05 19:08:53 UTC 2018
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; This is a sample choices file which exercises only a small range of
;;; the information provided by the customization system, in order to
;;; create a grammar for a very small fragment of English. It describes
;;; and SVO language with a small vocabulary drawn from English and
;;; subset of the (already simple) English verbal agreement paradigm. 
;;; Where it was not possible to leave a section blank, we have said
;;; the language does not manifest the phenomenon, even when this is
;;; not actually correct for English.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    POSSESSOR poss,
    SPEC-INIT bool ].

inflected :+ [ PERNUM-FLAG luk,
    POSSESSUM-FLAG luk,
    NUM-FLAG luk ].

infl-satisfied :+ [ PERNUM-FLAG na-or-+,
    POSSESSUM-FLAG na-or-+,
    NUM-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

possessive := poss.

nonpossessive := poss.

possessor := possessive.

possessum := possessive.

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                POSSESSUM #possessum ] ].

possessive-pron-1 := possessive.

possessor-pron-1 := possessor & possessive-pron-1.

possessum-pron-1 := possessum & possessive-pron-1.

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
3rd := person.
non-3rd := person.
2nd := non-3rd.
1st := non-3rd.

;;; Number

number := *top*.
sg := number.
pl := number.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item & possessum-rule-dtr &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < #spr &
                                   [ LOCAL.CAT.HEAD +npd,
                                     OPT - ] > ],
                       HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

common-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ POSSESSUM-FLAG -,
                NUM-FLAG - ] ].

poss-pron1-noun-lex := basic-one-arg &
  [ SYNSEM [ LKEYS.ALTKEYREL #altkeyrel & noun-relation &
                             [ PRED "pron_rel",
                               LBL #ltop,
                               ARG0 #possessor &
                                    [ COG-ST activ-or-more,
                                      SPECI + ] ],
             LOCAL [ CAT [ HEAD noun &
                                [ PRON +,
                                  POSSESSOR possessor-pron-1 ],
                           VAL [ SPR < [ LOCAL.CAT.HEAD det,
                                         OPT + ] >,
                                 COMPS olist,
                                 SUBJ olist,
                                 SPEC < > ] ],
                     CONT [ HOOK [ INDEX #possessor,
                                   LTOP #ltop ],
                            RELS <! #altkeyrel !>,
                            HCONS <!  !> ] ] ] ].

possessor-1sg-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

possessor-1pl-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                       PER 1st ] ].

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.PERNUM-FLAG - ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

itr-verb-lex := intransitive-verb-lex.

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

possessum-rule-dtr := word-or-lexrule.

;;; Lexical rule types

num-lex-rule-super := add-only-no-ccont-rule & possessum-rule-dtr &
  [ INFLECTED [ NUM-FLAG +,
                PERNUM-FLAG #pernum,
                POSSESSUM-FLAG #possessum ],
    DTR common-noun-lex &
        [ INFLECTED [ PERNUM-FLAG #pernum,
                      POSSESSUM-FLAG #possessum ] ] ].

singular-lex-rule := const-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

plural-lex-rule := infl-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

possessum-lex-rule-super := lex-rule &
  [ INFLECTED [ POSSESSUM-FLAG +,
                PERNUM-FLAG #pernum,
                NUM-FLAG #num ],
    DTR possessum-rule-dtr &
        [ INFLECTED [ PERNUM-FLAG #pernum,
                      NUM-FLAG #num ] ] ].

possessum-lex-rule-pron-1 := cat-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ POSSESSOR #poss & nonpossessive ],
                       POSSESSUM possessum-pron-1,
                       VAL [ SPEC #spec,
                             SUBJ #subj,
                             COMPS #comps,
                             SPR < [ LOCAL.CAT [ VAL.SPR < >,
                                                 HEAD +nd ] ] > ] ],
    DTR.SYNSEM.LOCAL.CAT [ HEAD [ POSSESSOR #poss,
                                  PRON - ],
                           VAL [ SPEC #spec,
                                 SUBJ #subj,
                                 COMPS #comps ] ] ].

possessum-lex-rule := infl-lex-rule & possessum-lex-rule-pron-1 & possessum-lex-rule-super.

nonpossessive-lex-rule-pron-1 := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ POSSESSOR nonpossessive ],
                       POSSESSUM nonpossessive ] ].

nonpossessive-lex-rule := const-lex-rule & nonpossessive-lex-rule-pron-1 & possessum-lex-rule-super.

pernum-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ PERNUM-FLAG +,
                NUM-FLAG #num,
                POSSESSUM-FLAG #possessum ],
    DTR verb-lex &
        [ INFLECTED [ NUM-FLAG #num,
                      POSSESSUM-FLAG #possessum ] ] ].

3sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

pl-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

non-3rd-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

poss-unary-phrase-pron-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL.CAT.HEAD.POSSESSOR possessor-pron-1 ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT -,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM possessum-pron-1 ] ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM.LOCAL [ CONT.HOOK #hook,
                   CAT [ HEAD det &
                              [ POSSESSOR possessor ],
                         VAL [ SPR < >,
                               COMPS #comps,
                               SUBJ #subj,
                               SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                      HEAD +np &
                                                           [ PRON - ] ],
                                                CONT.HOOK #hook &
                                                          [ INDEX #possessum &
                                                                  [ COG-ST uniq-id ],
                                                            LTOP #lbl ] ] ] > ] ] ],
    C-CONT [ RELS <! arg12-ev-relation &
                     [ PRED "poss_rel",
                       LBL #lbl,
                       ARG1 #possessum,
                       ARG2 #possessor ], quant-relation &
                                          [ PRED "exist_q_rel",
                                            ARG0 #possessum,
                                            RSTR #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #lbl ] !>,
             ICONS <!  !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ VAL [ SPR < >,
                                        COMPS #comps & olist,
                                        SUBJ #subj,
                                        SPEC < > ],
                                  HEAD +np ],
                            CONT.HOOK.INDEX #possessor ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC #spec,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPEC #spec,
    C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
