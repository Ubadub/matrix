;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of bipartite-stems
;;; created at:
;;;     Wed Feb 16 19:18:28 UTC 2011
;;; based on Matrix customization system version of:
;;;     Sat Feb 12 20:34:18 UTC 2011
;;;
;;; Testing bipartite stems code.  Choices file is based on
;;; mini-English.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

inflected :+ [ TR+OFF-AFF-VERB-FLAG luk,
    PERNUM-FLAG luk,
    ITR-AFF-VERB-FLAG luk,
    NUM-FLAG luk,
    TR+NEAR-AFF-VERB-FLAG luk ].

infl-satisfied :+ [ TR+OFF-AFF-VERB-FLAG na-or-+,
    PERNUM-FLAG na-or-+,
    ITR-AFF-VERB-FLAG na-or-+,
    NUM-FLAG na-or-+,
    TR+NEAR-AFF-VERB-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
3rd := person.
non-3rd := person.
2nd := non-3rd.
1st := non-3rd.

;;; Number

number := *top*.
sg := number.
pl := number.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := obl-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED.NUM-FLAG - ].

1sg-pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM sg ] ].

;;; Verbs

verb-lex := basic-verb-lex & bp-suff-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    INFLECTED.PERNUM-FLAG - ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

itr-verb-lex := intransitive-verb-lex.

tr-verb-lex := transitive-verb-lex.

itr-aff-verb-lex := intransitive-verb-lex &
  [ INFLECTED.ITR-AFF-VERB-FLAG + ].

tr+off-aff-verb-lex := transitive-verb-lex &
  [ INFLECTED.TR+OFF-AFF-VERB-FLAG + ].

tr+near-aff-verb-lex := transitive-verb-lex &
  [ INFLECTED.TR+NEAR-AFF-VERB-FLAG + ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

num-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ NUM-FLAG +,
                PERNUM-FLAG #pernum,
                ITR-AFF-VERB-FLAG #itr-aff-verb,
                TR+NEAR-AFF-VERB-FLAG #tr+near-aff-verb,
                TR+OFF-AFF-VERB-FLAG #tr+off-aff-verb ],
    DTR common-noun-lex &
        [ INFLECTED [ PERNUM-FLAG #pernum,
                      ITR-AFF-VERB-FLAG #itr-aff-verb,
                      TR+NEAR-AFF-VERB-FLAG #tr+near-aff-verb,
                      TR+OFF-AFF-VERB-FLAG #tr+off-aff-verb ] ] ].

singular-lex-rule := const-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

plural-lex-rule := infl-lex-rule & num-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

pernum-lex-rule-super := add-only-no-ccont-rule & bp-suff-rule-dtr &
  [ INFLECTED [ PERNUM-FLAG +,
                ITR-AFF-VERB-FLAG #itr-aff-verb,
                NUM-FLAG #num,
                TR+NEAR-AFF-VERB-FLAG #tr+near-aff-verb,
                TR+OFF-AFF-VERB-FLAG #tr+off-aff-verb ],
    DTR verb-lex &
        [ INFLECTED [ ITR-AFF-VERB-FLAG #itr-aff-verb,
                      NUM-FLAG #num,
                      TR+NEAR-AFF-VERB-FLAG #tr+near-aff-verb,
                      TR+OFF-AFF-VERB-FLAG #tr+off-aff-verb ] ] ].

3sg-lex-rule := infl-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

pl-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

non-3rd-lex-rule := const-lex-rule & pernum-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ].

bp-suff-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR bp-suff-rule-dtr &
        [ INFLECTED #infl ] ].

off-lex-rule := bp-suff-lex-rule-super &
  [ DTR.INFLECTED.TR+OFF-AFF-VERB-FLAG + ].

self-lex-rule := bp-suff-lex-rule-super &
  [ DTR.INFLECTED.ITR-AFF-VERB-FLAG + ].

near-lex-rule := bp-suff-lex-rule-super &
  [ DTR.INFLECTED.TR+NEAR-AFF-VERB-FLAG + ].

bp-suff-rule-dtr := word-or-lexrule.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
