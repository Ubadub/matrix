;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of special-morph
;;; created at:
;;;     Thu Apr 27 17:40:10 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Apr 25 03:52:37 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ FORM form,
    AUX bool ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

inflected :+ [ INFLECTION-FLAG luk ].

infl-satisfied :+ [ INFLECTION-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Form

form := *top*.
nonfinite := form.
finite := form.
simul := form.
purp := form.
	  
;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ] ].

noun-noun-lex := noun-lex.

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ],
    INFLECTED.INFLECTION-FLAG - ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

verb-verb-lex := intransitive-verb-lex.

;;; Auxiliaries

s-comp-aux := aux-lex & basic-one-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           SPEC < >,
                           SUBJ < >,
                           COMPS < #comps > ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

s-comp-aux-no-pred := s-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD.AUX - ] > ].

aux-aux-lex := s-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; Others

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ null,
                                                      COMPS null ] ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

inflection-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED.INFLECTION-FLAG +,
    DTR verb-lex ].

subord-lex-rule := infl-lex-rule & inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.MC - ].

purp-lex-rule := subord-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM purp ].

simul-lex-rule := subord-lex-rule &
  [ SYMSEM.LOCAL.CAT.HEAD.FORM simul ].

matrix-lex-rule := const-lex-rule & inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.MC + ].


;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT [ MC #mc,
				HEAD.AUX - ],
    SYNSEM.LOCAL.CAT.MC #mc ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT [MC #mc,
			       VAL.COMPS < > ],
    SYNSEM.LOCAL.CAT.MC #mc ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; head-comp-phrase requires auxiliary heads.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ SYNSEM.LOCAL.CAT.HEAD verb &
                          [ AUX + ] ].

clausal-mod-phrase := basic-unary-phrase &
  [ SYNSEM.LOCAL.CAT [ HEAD [ FORM #form,
			      MOD < [ LOCAL scopal-mod & 
					    [ CAT.HEAD verb,
					      CONT.HOOK.INDEX #arg1 ]] > ],
		       VAL [ SUBJ < >,
			     COMPS < >,
			     SPR < >,
			     SPEC < > ]],
    C-CONT [ RELS <! arg12-ev-relation &
		   [ LBL #ltop,
		     ARG1 #arg1,
		     ARG2 #arg2 ] !>,
	     HCONS <! !>,
	     HOOK [ INDEX #arg1,
		    LTOP #ltop ]],
    ARGS < [ SYNSEM.LOCAL [ COORD -,
			    CAT [ MC -,
				  HEAD verb & [ MOD < >,
						FORM #form ]],
			    CONT.HOOK [ INDEX #arg2,
					LTOP #ltop ]]] > ].

purposive-event-modifier-clause := clausal-mod-phrase &
  [ C-CONT.RELS <! [ PRED "in+order+to_x_rel" ] !>,
    ARGS < [ SYNSEM.LOCAL.CAT.HEAD.FORM purp ] > ].				  

;simultaneous-event-modifier-clause := clausal-mod-phrase &
;  [ C-CONT.RELS <! [ PRED "temp+overlap_x_rel" ] !>,
;    ARGS < [ SYNSEM.LOCAL.CAT.HEAD.FORM simul ] > ].