;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of nominal-clause-low
;;; created at:
;;;     Tue Jun 13 17:46:06 UTC 2017
;;; based on Matrix customization system version of:
;;;     Wed May 24 03:44:32 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ FORM form,
	  AUX bool,
	  INIT bool ].

noun :+ [ CASE case ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

inflected :+ [ CASE-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative
gen := case.  ; genitive

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ],
    INFLECTED.CASE-FLAG - ].

noun-noun-lex := noun-lex.

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
			      [ CASE nom ] ],
	     [ LOCAL.CAT.HEAD noun &
			      [ CASE acc ] ] > ].

verb-verb-lex := nom-intransitive-verb-lex.

;;; Auxiliaries

s-comp-aux := aux-lex & basic-one-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           SPEC < >,
                           SUBJ < >,
                           COMPS < #comps > ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

s-comp-aux-no-pred := s-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD.AUX - ] > ].

aux-aux-lex := s-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

;;; Subordinators

scopal-mod-with-comp-lex := single-rel-lex-item & norm-ltop-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL scopal-mod &
					      [ CAT [ HEAD verb,
						      VAL [ SUBJ < >,
							    SPR < >,
							    COMPS < > ]],
						CONT.HOOK [ LTOP #mod,
							    INDEX #index ]]] >,
			   VAL.COMPS < [ LOCAL [ CAT [ HEAD noun,
							VAL [ SUBJ < >,
							      SPR < >,
							      SPEC < >,
							      COMPS < > ]],
						  CONT.HOOK.INDEX #h2 ]] > ],
		     CONT [ HCONS <! qeq & 
				 [ HARG #h1,
				   LARG #mod ] !>,
			    HOOK.INDEX #index ]],
	     LKEYS.KEYREL [ ARG0 event,
			    ARG1 #h1,
			    ARG2 #h2 ]]].

subord-lex-item := scopal-mod-with-comp-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < >,
			     SPR < >,
			     COMPS < #comps > ]],
    ARG-ST < #comps &
    	     [ LOCAL.CAT [ MC - ]] > ].

clause-init-subord-lex-item := subord-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.INIT + ].

clause-init-prehead-subord-lex-item := clause-init-subord-lex-item &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

;;; Others

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ null,
                                                      COMPS null ] ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED.CASE-FLAG +,
    DTR noun-lex ].

nom-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

gen-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ HEAD.CASE gen,
		       VAL.SPEC < [LOCAL.CAT.HEAD noun ] > ]].

nominalized-lex-rule-super := infl-lex-rule & 
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

nominal-lex-rule := nominalized-lex-rule-super & cat-change-no-cont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun & 
			    [ FORM #form,
			      AUX #aux,
			      INIT #init,
			      MOD #mod ],
		       VAL [ SPR < [ LOCAL.CAT.HEAD noun &
						   [ CASE gen ] ] >,
			     COMPS #comps ],
		       MC #mc,
		       MKG #mkg,
		       HC-LIGHT #hc-light,
		       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
		       LBL #ltop,
		       ARG0 ref-ind & #arg0,
		       ARG1 #arg1 ] !>,
	     HCONS <! qeq &
		    [ HARG #arg1,
		      LARG #larg ] !>,
	     HOOK [ INDEX #arg0,
		    LTOP #ltop ]],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD [ FORM #form,
				    AUX #aux,
				    INIT #init,
				    MOD #mod ],
			     VAL [ COMPS #comps ],
			     MC #mc,
			     MKG #mkg,
			     HC-LIGHT #hc-light,
			     POSTHEAD #posthead ],
		       CONT.HOOK [ LTOP #larg ]]].

; copy up everything in cat

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX -,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < >].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; head-comp-phrase requires auxiliary heads.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

head-spec-phrase := basic-head-spec-phrase & head-final.