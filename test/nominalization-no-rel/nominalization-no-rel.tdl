;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of nominalization-no-rel
;;; created at:
;;;     Tue Oct 17 17:28:44 UTC 2017
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ NMZ bool,
    FORM form,
    AUX bool,
    INIT bool ].

+nvcdmo :+ [ MOD < > ].

inflected :+ [ CASE-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc
gen := case.  ; gen

form := *top*.

nonfinite := form.

finite := form.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    INFLECTED.CASE-FLAG -,
    SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < #spr &
                                   [ LOCAL.CAT.HEAD det,
                                     OPT + ] > ],
                       HEAD.NMZ - ] ].

noun-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

verb-verb-lex := nom-intransitive-verb-lex.

;;;;;;;;;;;;;;;;;;;
;;; Subordinators
;;;;;;;;;;;;;;;;;;;

scopal-mod-with-comp-lex := single-rel-lex-item & norm-ltop-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL scopal-mod &
                                              [ CAT [ HEAD verb,
                                                      VAL [ SUBJ < >,
                                                            SPR < >,
                                                            COMPS < > ] ],
                                                CONT.HOOK [ LTOP #mod,
                                                            INDEX #index ] ] ] >,
                           VAL.COMPS < [ LOCAL [ CAT [ HEAD noun,
                                                       VAL [ SUBJ < >,
                                                             SPR < >,
                                                             COMPS < > ] ],
                                                 CONT.HOOK.INDEX #h2 ] ] > ],
                     CONT [ HCONS <! qeq &
                                     [ HARG #h1,
                                       LARG #mod ] !>,
                            HOOK.INDEX #index ] ],
             LKEYS.KEYREL [ ARG0 event,
                            ARG1 #h1,
                            ARG2 #h2 ] ] ].

subord-lex-item := scopal-mod-with-comp-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < >,
                           SPR < > ],
    ARG-ST < [ LOCAL.CAT [ HEAD noun &
                                [ NMZ + ],
                           MC - ] ] > ].

clause-init-prehead-subord-lex-item := subord-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD.INIT +,
                       POSTHEAD - ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK [ INDEX event,
                               LTOP #ltop ],
                   CAT [ HEAD verb &
                              [ NMZ +,
                                FORM #form,
                                AUX #aux,
                                INIT #init,
                                MOD #mod ],
                         VAL [ SUBJ < [ LOCAL [ CAT [ HEAD noun,
                                                      VAL.SPR < > ],
                                                CONT.HOOK.INDEX #subj ] ] >,
                               COMPS #comps,
                               SPR #spr,
                               SPEC #spec ],
                         MC #mc,
                         MKG #mkg,
                         HC-LIGHT #hc-light,
                         POSTHEAD #posthead ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD [ FORM #form,
                                    AUX #aux,
                                    INIT #init,
                                    MOD #mod ],
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   COMPS #comps,
                                   SPR #spr,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK.LTOP #ltop ],
    C-CONT [ RELS <!  !>,
             HCONS <!  !> ] ].

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED.CASE-FLAG +,
    DTR noun-lex ].

nom-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

gen-lex-rule := case-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE gen ].

nominalized-lex-rule-super := infl-lex-rule & nominalization-lex-rule &
  [ INFLECTED #infl,
    DTR verb-lex &
        [ INFLECTED #infl ] ].

NMZ-lex-rule := nominalized-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE gen ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

nominalized-clause-phrase := basic-unary-phrase &
  [ SYNSEM.LOCAL [ CONT.HOOK.LTOP #ltop,
                   CAT [ HEAD noun,
                         VAL [ SPR < [ OPT + ] >,
                               COMPS < >,
                               SUBJ < >,
                               SPEC < > ] ] ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD verb &
                                       [ NMZ + ],
                                  VAL [ COMPS < >,
                                        SUBJ < >,
                                        SPR < >,
                                        SPEC < > ] ],
                            CONT.HOOK.LTOP #ltop ] ] > ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT - ].
